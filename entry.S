# Based off of https://github.com/DragonMinded/libdragon/blob/trunk/src/entrypoint.S

#include "regs.S"

#define INT_VECTOR_INSTRUCTION_COUNT 4

	.set noreorder

	.section .boot, "ax"
	.global _start
_start:
	lw t0, 0x80000318 # memory size

	li t1, 0x7FFFFFF0
	addu sp, t0, t1 # init stack
	la gp, _gp # init data pointer

    # magic N64 hardware init
	li v0, 8
	sw v0, 0xBFC007FC

	# a bit from libgloss so we start at a known state
	li v0, SR_CU1|SR_PE|SR_FR|SR_KX|SR_SX|SR_UX
	mtc0 v0, C0_SR
	mtc0 zero, C0_CAUSE

	# copy code and data via DMA
	la a0, __text_start
	la a1, __data_end
	la t0, __ultrazig_text_start
	subu a2, a0, t0 # skip over .boot section
	addu a2, 0x10001000 # address in rom

	# Start PI DMA transfer
	lui t0, 0xA460
	sw a0, 0x00(t0)
	sw a2, 0x04(t0)
	sub t1, a1, a0
	addi t1, -1
	sw t1, 0x0C(t0)

	# fill .bss with 0s
	la a0, __bss_start
	or a0, 0x20000000
	la a1, __bss_end
	or a1, 0x20000000
bss_init:
	sw zero, (a0)
	addiu a0, 4
	bltu a0, a1, bss_init
	nop

	# Wait for DMA transfer to be finished
	lui t0, 0xA460
wait_dma_end:
	lw t1, 0x10(t0)
	andi t1, 3
	bnez t1, wait_dma_end
	nop

	# load interrupt vector
	la t0, intvector
	la t1, 0xA0000000
	la t2, INT_VECTOR_INSTRUCTION_COUNT
loadintvectorloop:
	lw t3, (t0)
	sw t3, (t1)
	sw t3, 0x80(t1)
	sw t3, 0x100(t1)
	sw t3, 0x180(t1)
	
	cache HIT_INVALIDATE_I, (t1)
	cache HIT_INVALIDATE_I, 0x80(t1)
	cache HIT_INVALIDATE_I, 0x100(t1)
	cache HIT_INVALIDATE_I, 0x180(t1)
	addi t0, 4
	addi t1, 4
	addiu t2, -1
	bnez t2,loadintvectorloop
	nop

    # Set FS bit to allow flashing of denormalized floats
	# The FPU inside the N64 CPU does not implement denormalized floats
	# and will generate an unmaskable exception if a denormalized float
	# is generated by any floating point operations. In order to prevent
	# this exception we set the FS bit in the fcr31 control register to
	# instead "flash" and "flush" the denormalized number. To understand 
	# the flashing rules please read pg. 213 of the VR4300 programmers manual.
    cfc1 t0, $31
    li t1, C1_FCR31_FS
    or t0, t1
    ctc1 t0, $31

	jal main # call main app
    nop
deadloop:
	b deadloop
	nop

intvector:
	la k1, inthandler
	jr k1
	nop
